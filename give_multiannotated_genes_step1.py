#!/usr/bin/python

##------------------------------------------------------------------------------------------------------------
# This script finds the gene annotation for the contigs in the transcriptome using the protein annotation
# generated by do_annot_table.py. It requires the files obtained from the OryCun and Mus references, as
# noted in the github
#------------------------------------------------------------------------------------------------------------
# input1: have file Oryctolagus_cuniculus.OryCun2.0.pep.protein_information.txt in the folder
# input2: have file Mus_musculus.GRCm38.pep.protein_information.txt in the folder
# input3: have file annotation_ORY_MUS.txt generated with do_annot_table.py in the folder
# output1: table where each Trinity gene has an ENSEMBL ORY and ENSEMBL MUS annotation; this file
# still contains Trinity genes annotated to multiple genes and it is named new_annotation_DONOTUSETHISFILE.txt
#------------------------------------------------------------------------------------------------------------
# USAGE: give_annotated_genes_step1.py
#------------------------------------------------------------------------------------------------------------
# BY: MafaldaSF 20/04/2016 0:09am
# BY: MafaldaSF 14/05/2018: Modified to read a Mus_musculus annotatio, instead of MUS
# BY: MafaldaSF 20/11/2019: Changed header to submit to github
#------------------------------------------------------------------------------------------------------------

import os

def makeorydict(oryinfo):
	
	#open ory dictionary:
	orydict={}
	
	oryinfo=open(oryinfo,'r')
	
	for line in oryinfo:
		line=line.strip().split() #split the fields
		protein=line[0].strip('>') #protein is the first field; remove the >
		gene=line[1].strip('gene:') #gene is the second field; remove gene:
		orydict.setdefault(protein,gene) #set protein and gene in the dictionary
		#print orydict
		
		keys=orydict.keys() #put the keys in a list
	#let's make sure that we have exactly the same number of keys and lines in the original file
	print "Is this the same number?"
	print "How many keys in the ory dictionary?:", len(keys)
	print "How many keys in the original file?:"
	os.system("wc -l Oryctolagus_cuniculus.OryCun2.0.pep.protein_information.txt")
	
	return orydict
	
def makehomodict(homoinfo):
	
	#open homo dictionary:
	homodict={}
	
	homoinfo=open(homoinfo,'r')
	
	for line in homoinfo:
		line=line.strip().split() #split the fields
		protein=line[0].strip('>') #protein is the first field; remove the >
		gene=line[1].strip('gene:') #gene is the second field; remove gene:
		homodict.setdefault(protein,gene) #set protein and gene in the dictionary
		
		
		keys=homodict.keys() #put the keys in a list
	#let's make sure that we have exactly the same number of keys and lines in the original file
	print "Is this the same number?"
	print "How many keys in the homo dictionary?:", len(keys)
	print "How many keys in the original file?:"
	os.system("wc -l Mus_musculus.GRCm38.pep.protein_information.txt")
	
	return homodict

#call the functions above:
orydict=makeorydict("Oryctolagus_cuniculus.OryCun2.0.pep.protein_information.txt")
homodict=makehomodict("Mus_musculus.GRCm38.pep.protein_information.txt")

#calling the annotation file:
annotation=open("annotation_ORY_MUS.txt","r")
lines=annotation.readlines()


#this is only an intermediate file that will have multiple annotations for some genes, so DON'T USE IT:
newannotation=open("new_annotation_DONOTUSETHISFILE.txt","w")


number=len(lines)
for line in lines[1:number]: #do this to skip the header
	output=''
	line=line.strip().split('\t')
	contig=line[0].strip().split('_i') #remove the last part of the code
	contig=contig[0] #convert the contig code to a gene code
	ory_prot=line[1]
	homo_prot=line[2]
	
	#search for the gene of that protein in the dictionaries:
	if ory_prot=='NA':
		ory_output=''.join('NA')
	else:
		ory_output=''.join(orydict.get(ory_prot))
	
	if homo_prot=='NA':
		homo_output=''.join('NA')
	else:
		homo_output=''.join(homodict.get(homo_prot))
		
	newannotation.write(contig+'\t'+ory_output+'\t'+homo_output+'\n')
	
		
	#write output to an output (too lazy to create matrix...)
newannotation.close()


		